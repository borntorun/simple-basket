/*!
 * localforageDriver.js
 * Driver for localforage (https://github.com/mozilla/localForage)
 * Supports all internal drivers in localforage plus:
 * - sessionStorageWrapper (https://github.com/thgreasi/localForage-sessionStorageWrapper)
 * Copyright 2015 JoÃ£o Carvalho (https://github.com/borntorun); Licensed MIT
 */
!function(global,factory){"use strict";"function"==typeof define&&define.amd?define(["localforage","sessionStorageWrapper"],function(localforage,sessionStorageWrapper){factory(localforage,sessionStorageWrapper)}):"object"==typeof exports?module.exports=factory(require("localforage"),require("sessionStorageWrapper")):global.localforageDriver=factory(global.localforage,global.sessionStorageWrapper)}(this,function(localforage,sessionStorageWrapper){"use strict";function LocalforageDriverFactory(){function create(wrapperStorage,opt){var driver=new LocalforageDriver;return wrapperStorage?driver.config(wrapperStorage,opt):new Promise(function(resolve){resolve(driver)})}this.create=create}function LocalforageDriver(){function config(wrapperStorage,opt){function setOption(key,type,defaultValue){typeof opt[key]===type?options[key]=opt[key]:void 0!==defaultValue&&(options[key]=defaultValue)}var wrapper=STORAGEWRAPPERS[wrapperStorage],thePromise=new Promise(function(resolve,reject){function setDriver(driver){localForageInstance.setDriver(driver).then(function(){options.driver=wrapper.name,configOk=!0,resolve(_thislocalforageDriver)})["catch"](function(error){reject(error)})}if(configCalled)return void reject(ERRORS.CONFIGALREADYCALLED);if(!wrapper)return void reject(ERRORS.DRIVERINVALID.replace("#",wrapperStorage));if(configCalled=!0,opt=isHashObject(opt)?opt:{},setOption("name","string","app-localforageDriver"),setOption("storeName","string","store"),setOption("description","string",""),setOption("size","number"),setOption("key","string","key"),Object.keys(options).length>0&&localForageInstance.config(options),hasProp(wrapper,"driver")){if(!wrapper.driver)return void reject(ERRORS.DRIVERNOTDEFINED.replace("#",wrapper.name));localForageInstance.defineDriver(wrapper.driver).then(function(){setDriver(wrapper.name)})["catch"](function(error){reject(error)})}else setDriver(wrapper.name)});return thePromise}function load(callback){var thePromise=new Promise(function(resolve,reject){return configOk?void localForageInstance.ready().then(function(){return localForageInstance.getItem(options.key)}).then(function(data){resolve(data)})["catch"](function(error){reject(error)}):void reject(ERRORS.INVALIDSTATE)});return callCallback(thePromise,callback),thePromise}function save(value,callback){var thePromise=new Promise(function(resolve,reject){return configOk?void localForageInstance.ready().then(function(){return localForageInstance.setItem(options.key,value)}).then(function(data){resolve(data)})["catch"](function(error){reject(error)}):void reject(ERRORS.INVALIDSTATE)});return callCallback(thePromise,callback),thePromise}function clear(callback){var thePromise=new Promise(function(resolve,reject){return configOk?void localForageInstance.ready().then(function(){return localForageInstance.removeItem(options.key)}).then(function(data){resolve(data)})["catch"](function(error){reject(error)}):void reject(ERRORS.INVALIDSTATE)});return callCallback(thePromise,callback),thePromise}function callCallback(promise,callback){callback&&promise.then(function(data){callback(null,data)},function(err){callback(err)})}function hasProp(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}function isHashObject(obj){return!!obj&&"object"==typeof obj&&(void 0===obj.constructor||obj.constructor==={}.constructor)}var localForageInstance,configOk=!1,configCalled=!1,options={},_thislocalforageDriver=this;localForageInstance=localforage.createInstance(),this.name="localforageDriver",this.config=config,this.load=load,this.save=save,this.clear=clear,this.getOptions=function(){return options}}var STORAGEWRAPPERS={localstorage:{name:localforage.LOCALSTORAGE},indexeddb:{name:localforage.INDEXEDDB},websql:{name:localforage.WEBSQL},sessionstorage:{name:"sessionStorageWrapper",driver:sessionStorageWrapper}},ERRORS={INVALIDSTATE:new Error("Storage driver config is in invalid state."),CONFIGALREADYCALLED:new Error("Config already called."),DRIVERINVALID:new Error("Driver is invalid.[#]"),DRIVERNOTDEFINED:new Error("Driver is not defined.[#]")};return LocalforageDriverFactory.prototype.STORAGE={LOCALSTORAGE:"localstorage",SESSIONSTORAGE:"sessionstorage",INDEXEDDB:"indexeddb",WEBSQL:"websql"},new LocalforageDriverFactory});
